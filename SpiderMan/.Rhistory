num_cha<-as.character(data$review)
scorenchar<-data %>%
select(score) %>%
mutate(nchar=nchar(num_cha))
head(scorenchar)
tail(scorenchar)
ggplot(scorenchar, aes(factor(score), nchar))+
geom_boxplot()
#가설검정
#H0: 평점이 높으면 글자수도 높다. vs H1: 그렇지 않다.
qqnorm(scorenchar$score)
qqnorm(scorenchar$nchar)
#둘다 정규성을 띄지않는다.
#만약 두집단 모두 정규성을 따른다고 가정하면
var.test(scorenchar$score~scorenchar$nchar)
shapiro.test(scorenchar$nchar)
anova(scorenchar$nchar)
t.test(scorenchar$score ~ scorenchar$nchar, mu=0, alternative="greater", var.equal=TRUE)
ow <- lm(score~nchar, data=scorenchar)
anova(ow)
cov(scorenchar$score, scorenchar$nchar)
cor(scorenchar$score, scorenchar$nchar)
par(mfrow=c(1, 1), mar=c(4, 4, 1, 1))
plot(score~nchar, pch=16, data=scorenchar, xlab="점수", ylab="글자수")
abline(lm(Height~Father, data=hf.son), col="red", lwd=2)
abline(lm(Height~Father, data=scorenchar), col="red", lwd=2)
abline(lm(score~nchar, data=scorenchar), col="red", lwd=2)
par(mfrow=c(1, 1), mar=c(3, 3, 1, 1))
plot(score~nchar, pch=16, data=scorenchar, xlab="점수", ylab="글자수")
abline(lm(score~nchar, data=scorenchar), col="red", lwd=2)
par(mfrow=c(1, 1), mar=c(5, 5, 1, 1))
plot(score~nchar, pch=16, data=scorenchar, xlab="점수", ylab="글자수")
abline(lm(score~nchar, data=scorenchar), col="red", lwd=2)
par(mfrow=c(1, 1), mar=c(5, 4, 1, 1))
plot(score~nchar, pch=16, data=scorenchar, xlab="점수", ylab="글자수")
abline(lm(score~nchar, data=scorenchar), col="red", lwd=2)
par(mfrow=c(1, 1), mar=c(5, 4, 1, 1))
plot(nchar~score, pch=16, data=scorenchar, xlab="점수", ylab="글자수")
abline(lm(score~nchar, data=scorenchar), col="red", lwd=2)
plot(nchar~score, pch=16, data=scorenchar, xlab="점수", ylab="글자수")
abline(lm(nchar~score, data=scorenchar), col="red", lwd=2)
cor(scorenchar$score, scorenchar$nchar)
cor(scorenchar$nchar, scorenchar$score)
wow <- lm(score~nchar, data=scorenchar)
anova(wow)
#등분산 검정
var.test(scorenchar$score~scorenchar$nchar)
#등분산 검정
var.test(scorenchar$score~scorenchar$nchar)
#등분산 검정
var.test(scorenchar$nchar~scorenchar$score)
#가설검정
#H0: 평점이 높으면 글자수도 높다. vs H1: 그렇지 않다.
str(scorenchar)
dim(scorenchar)
class(scorenchar)
#등분산 검정
var.test(scorenchar$score~scorenchar$nchar)
#등분산 검정
wow <- lm(score~nchar, data=scorenchar)
anova(wow)
#가설검정
#H0: 평점이 높으면 글자수도 높다. vs H1: 그렇지 않다.
qqnorm(scorenchar$score)
qqnorm(scorenchar$nchar)
#둘다 정규성을 띄지않는다.
#만약 두집단 모두 정규성을 따른다고 가정하면
var.test(scorenchar$score~scorenchar$nchar)
plot(nchar~score, pch=16, data=scorenchar, xlab="평점", ylab="글자수")
abline(lm(nchar~score, data=scorenchar), col="red", lwd=2)
plot(score~nchar, pch=16, data=scorenchar, xlab="평점", ylab="글자수")
abline(lm(nchar~score, data=scorenchar), col="red", lwd=2)
plot(nchar~score, pch=16, data=scorenchar, xlab="평점", ylab="글자수")
abline(lm(nchar~score, data=scorenchar), col="red", lwd=2)
knitr::opts_chunk$set(echo = TRUE)
#가설검정
#H0: 평점이 높으면 글자수도 많다. vs H1: 그렇지 않다.
qqnorm(scorenchar$score)
#가설검정
#H0: 평점이 높으면 글자수도 많다. vs H1: 그렇지 않다.
qqnorm(scorenchar$score)
#일자별/시간대별 평점 분석을 할 것
install.packages("lawstat")
library(lawstat)
#둘다 정규성을 띄지않는다.
levene.test(scorenchar$score, scorenchar$nchar)
knitr::opts_chunk$set(echo = TRUE)
library(lawstat)
library(ggthemes)
library(KoNLP)
library(extrafont)
library(ggplot2)
library(tidyverse)
library(nycflights13)
library(dplyr)
library(lubridate)
library(plotly)
windowsFonts()
windowsFonts(malgun = "맑은 고딕")
theme_update(text = element_text(family = "malgun"))
setwd('D:/Workspace/R-Project/SpiderMan')
data<-read.csv('SpiderMan_review.csv')
library(lawstat)
library(ggthemes)
library(KoNLP)
library(extrafont)
library(ggplot2)
library(tidyverse)
library(nycflights13)
library(dplyr)
library(lubridate)
library(plotly)
windowsFonts()
windowsFonts(malgun = "맑은 고딕")
theme_update(text = element_text(family = "malgun"))
setwd('D:/Workspace/R-Project/SpiderMan')
data<-read.csv('SpiderMan_review.csv')
data2<-data%>%
select(datetime, score) %>%
mutate(date = substr(data$datetime,6, 10)) %>%
mutate(time = substr(data$datetime,12, 13))
data3<-data2 %>%
group_by(date) %>%
summarise(average=mean(score))
date_review<-ggplot(data3, aes(x=date, y=average, fill=average)) +
labs(x='날짜', y='평균 평점') +
geom_bar(width=0.5, stat='identity') +
geom_hline(yintercept=seq(0,8,2.5), lty='dotted', size=0.1)+
ggtitle('스파이더맨 날짜별 평균 평점') +
theme(plot.title = element_text(face = "bold", hjust = 0.5,
size = 15, color = "red3"))
ggplotly(date_review)
hour_review<-data2[,-1] %>%
group_by(time) %>%
summarise(avr=round(mean(score),1)) %>%
arrange(time) %>%
ggplot(aes(x=time, y=avr, group=1))+
labs(x='시간대', y='평균 평점') +
geom_line(arrow=arrow(), size=2, colour='orange') +
geom_point(size=3, shape=19, colour="darkred")+
geom_hline(yintercept=seq(6,8,1), lty='dotted', size=0.1)+
ggtitle('스파이더맨 시간대별 평균 평점') +
theme(plot.title = element_text(face = "bold", hjust = 0.5,
size = 15, color = "red3"))
ggplotly(hour_review)
#평점별로 얼마나 긴 평가를 남기는지 살펴보기 위해, 평점별 영화평 글자수의 box-plot을 그려보았습니다.
num_cha<-as.character(data$review)
scorenchar<-data %>%
select(score) %>%
mutate(nchar=nchar(num_cha))
ggplot(scorenchar, aes(factor(score), nchar))+
geom_boxplot()
# 높은 평점라고 더 긴 평을 남기는건 아니고, 낮은 평점이라고 짧은 평을 남기는건 아닌거 같습니다.
# 오히려 10점은 영화평이 매우 짧았고, 낮은 점수를 준사람이 영화에 대해 할말이 많았던 것 같습니다.
# 아마도 만족한 소비자는 굳이 영화에 대해 이리저리 설명할 필요성을 못 느끼는것 같다. 반면, 불만족하거나
# 뭔가 아쉬웠던 사람은 이래저래 영화에 대해 할말이 많았던 것으로 보입니다.
#가설검정
#H0: 평점이 높으면 글자수도 많다. vs H1: 그렇지 않다.
qqnorm(scorenchar$score)
qqnorm(scorenchar$nchar)
#둘다 정규성을 띄지않는다.
levene.test(scorenchar$score, scorenchar$nchar)
#등분산도 나타내지 않는다.
#만약 두집단 모두 정규성을 나타내고 등분산을 따른다고 가정하면
wow <- lm(score~nchar, data=scorenchar)
anova(wow)
#p-value 가 매우 작습니다. 영가설을 기각합니다.
cov(scorenchar$score, scorenchar$nchar)#공분산
cor(scorenchar$score, scorenchar$nchar)#상관계수 -0.139
par(mfrow=c(1, 1), mar=c(5, 4, 1, 1))
plot(nchar~score, pch=16, data=scorenchar, xlab="평점", ylab="글자수")
abline(lm(nchar~score, data=scorenchar), col="red", lwd=2)
#두 변수는 연관이 없어 보입니다.
setwd('D:/Workspace/R-Project/SpiderMan')
library(rJava)
library(KoNLP)
library(RColorBrewer)
library(wordcloud2)
library(plotrix)
library(extrafont)
library(tm)
library(fmsb)
useSejongDic() #한글 세종사전
only_rev<-read.csv('SpiderMan_review.csv')
only_rev<-only_rev[,2]
write.table(only_rev, "D:/Workspace/R-Project/SpiderMan/SM_only_rev.txt", sep = ",",
row.names = FALSE, quote = FALSE, append = TRUE,  na = "NA")
only_review<-readLines('SM_only_rev.txt')
head(only_review)
Nouns <- sapply(only_review, extractNoun, USE.NAMES=F) #각 라인마다 명사단어들만 남기기
Nouns2<-unlist(Nouns) #명사만 추출된 데이터
Nouns2<-Filter(function(x) {nchar(x)>=2}, Nouns2) #2글자 이상만
head(Nouns2, 50)
Nouns2<-gsub('영화','',Nouns2)
Nouns2<-gsub('스파이더맨','',Nouns2)
Nouns2<-gsub('스파이더맨은','',Nouns2)
Nouns2<-gsub('스파이더맨을','',Nouns2)
Nouns2<-gsub('스파이더맨이','',Nouns2)
Nouns2<-gsub('진짜','',Nouns2)
Nouns2<- gsub('[~!/@#$%&*^^()"_+=?<>]','',Nouns2)
Nouns2 <- gsub('[ㄱ-ㅎ]','',Nouns2)
Nouns2<- gsub('(ㅜ|ㅠ)','',Nouns2)
Nouns2 <- gsub("\\d+","",Nouns2)
wordcount <- table(Nouns2)
wordcount_top <-head(sort(wordcount, decreasing = T),300)
set.seed(123)
wordcloud2(wordcount_top, size=4, col="random-light", backgroundColor="black")
setwd('D:/Workspace/R-Project/SpiderMan')
library(rJava)
library(KoNLP)
library(RColorBrewer)
library(wordcloud2)
library(plotrix)
library(extrafont)
library(tm)
library(fmsb)
useSejongDic() #한글 세종사전
only_rev<-read.csv('SpiderMan_review.csv')
only_rev<-only_rev[,2]
write.table(only_rev, "D:/Workspace/R-Project/SpiderMan/SM_only_rev.txt", sep = ",",
row.names = FALSE, quote = FALSE, append = TRUE,  na = "NA")
only_review<-readLines('SM_only_rev.txt')
head(only_review)
Nouns <- sapply(only_review, extractNoun, USE.NAMES=F) #각 라인마다 명사단어들만 남기기
setwd('D:/Workspace/R-Project/SpiderMan')
library(rJava)
library(KoNLP)
library(RColorBrewer)
library(wordcloud2)
library(plotrix)
library(extrafont)
library(tm)
library(fmsb)
useSejongDic() #한글 세종사전
only_rev<-read.csv('SpiderMan_review.csv')
only_rev<-only_rev[,2]
write.table(only_rev, "D:/Workspace/R-Project/SpiderMan/SM_only_rev.txt", sep = ",",
row.names = FALSE, quote = FALSE, append = TRUE,  na = "NA")
only_review<-readLines('SM_only_rev.txt')
head(only_review)
Nouns <- sapply(only_review, extractNoun, USE.NAMES=F) #각 라인마다 명사단어들만 남기기
Nouns2<-unlist(Nouns) #명사만 추출된 데이터
Nouns2<-Filter(function(x) {nchar(x)>=2}, Nouns2) #2글자 이상만
Nouns2<-gsub('영화','',Nouns2)
Nouns2<-gsub('스파이더맨','',Nouns2)
Nouns2<-gsub('스파이더맨은','',Nouns2)
Nouns2<-gsub('스파이더맨을','',Nouns2)
Nouns2<-gsub('스파이더맨이','',Nouns2)
Nouns2<-gsub('진짜','',Nouns2)
Nouns2<- gsub('[~!/@#$%&*^^()"_+=?<>]','',Nouns2)
Nouns2 <- gsub('[ㄱ-ㅎ]','',Nouns2)
Nouns2<- gsub('(ㅜ|ㅠ)','',Nouns2)
Nouns2 <- gsub("\\d+","",Nouns2)
wordcount <- table(Nouns2)
wordcount_top <-head(sort(wordcount, decreasing = T),300)
wordcloud2(wordcount_top, size=4, col="random-light", backgroundColor="black")
setwd('D:/Workspace/R-Project/SpiderMan')
library(rvest)
library(stringr)
library(dplyr)
trim <- function(x) gsub("^\\s+|\\s+$", "", x)
main_url<-'https://movie.naver.com/movie/bi/mi/pointWriteFormList.nhn?code=173123&type=after&isActualPointWriteExecute=false&isMileageSubscriptionAlready=false&isMileageSubscriptionReject=false&page='
html<-read_html(main_url)
tmp<-html%>%
html_node('.score_total') %>%
html_text('em') %>%
trim()
str_locate(tmp, "총")
pages <- str_sub(tmp, 9, -2)
pages<-gsub(',', '', pages)
end_page<-ceiling(as.numeric(pages)/10)
#데이터를 저장할 데이터프레임 초기화
dfs <- data.frame(score=c(), review=c(), writer=c(), datetime=c())
for(total_pages in 1:end_page){
url <- paste0(main_url, total_pages)
html <- read_html(url) %>%
html_node('div.score_result') %>%
html_nodes('li') -> lis
score <- c()
review <- c()
writer <- c()
datetime <- c()
for (li in lis) {
score <- c(score, html_node(li,'.star_score') %>%
html_text('em') %>% trim())
li %>%
html_node('.score_reple') %>%
html_text('p') %>%
trim() -> comments
idx <- str_locate(comments, "\r")
review <- c(review, str_sub(comments, 1, idx[1]-1))
comments <- trim(str_sub(comments, idx[1], -1))
idx <- str_locate(comments, "\r")
writer <- c(writer, str_sub(comments, 1, idx[1]-1))
comments <- trim(str_sub(comments, idx[1], -1))
idx <- str_locate(comments, "\r")
datetime <- c(datetime, str_sub(comments, 1, idx[1]-1))
}
total_review <- data.frame(score=score, review=review, writer=writer, datetime=datetime)
dfs <- rbind.data.frame(dfs, total_review)
}
write.csv(dfs, "SpiderMan_review.csv" , row.names = FALSE)
setwd('D:/Workspace/R-Project/SpiderMan')
library(rJava)
library(KoNLP)
library(RColorBrewer)
library(wordcloud2)
library(plotrix)
library(extrafont)
useSejongDic() #한글 세종사전
only_rev<-read.csv('SpiderMan_review.csv')
only_rev<-only_rev[,2]
write.table(only_rev, "D:/Workspace/R-Project/SpiderMan/SM_only_rev.txt", sep = ",",
row.names = FALSE, quote = FALSE, append = TRUE,  na = "NA")
only_review<-readLines('SM_only_rev.txt')
head(only_review)
Nouns <- sapply(only_review, extractNoun, USE.NAMES=F) #각 라인마다 명사단어들만 남기기
Nouns2<-unlist(Nouns) #명사만 추출된 데이터
Nouns2<-Filter(function(x) {nchar(x)>=2}, Nouns2) #2글자 이상만
Nouns2<-gsub('영화','',Nouns2)
Nouns2<-gsub('스파이더맨','',Nouns2)
Nouns2<-gsub('스파이더맨은','',Nouns2)
Nouns2<-gsub('스파이더맨을','',Nouns2)
Nouns2<-gsub('스파이더맨이','',Nouns2)
Nouns2<-gsub('관람객','',Nouns2)
Nouns2<-gsub('진짜','',Nouns2)
Nouns2<- gsub('[~!/@#$%&*^^()"_+=?<>]','',Nouns2)
Nouns2 <- gsub('[ㄱ-ㅎ]','',Nouns2)
Nouns2<- gsub('(ㅜ|ㅠ)','',Nouns2)
Nouns2 <- gsub("\\d+","",Nouns2)
wordcount <- table(Nouns2)
wordcount_top <-head(sort(wordcount, decreasing = T),300)
wordcloud2(wordcount_top, size=4, col="random-light", backgroundColor="black")
setwd('D:/Workspace/R-Project/SpiderMan')
library(rvest)
library(stringr)
library(dplyr)
trim <- function(x) gsub("^\\s+|\\s+$", "", x)
main_url<-'https://movie.naver.com/movie/bi/mi/pointWriteFormList.nhn?code=173123&type=after&isActualPointWriteExecute=false&isMileageSubscriptionAlready=false&isMileageSubscriptionReject=false&page='
html<-read_html(main_url)
tmp<-html%>%
html_node('.score_total') %>%
html_text('em') %>%
trim()
str_locate(tmp, "총")
pages <- str_sub(tmp, 9, -2)
pages<-gsub(',', '', pages)
end_page<-ceiling(as.numeric(pages)/10)
#데이터를 저장할 데이터프레임 초기화
dfs <- data.frame(score=c(), review=c(), writer=c(), datetime=c())
for(total_pages in 1:end_page){
url <- paste0(main_url, total_pages)
html <- read_html(url) %>%
html_node('div.score_result') %>%
html_nodes('li') -> lis
score <- c()
review <- c()
writer <- c()
datetime <- c()
for (li in lis) {
score <- c(score, html_node(li,'.star_score') %>%
html_text('em') %>% trim())
li %>%
html_node('.score_reple') %>%
html_text('p') %>%
trim() -> comments
idx <- str_locate(comments, "\r")
review <- c(review, str_sub(comments, 1, idx[1]-1))
comments <- trim(str_sub(comments, idx[1], -1))
idx <- str_locate(comments, "\r")
writer <- c(writer, str_sub(comments, 1, idx[1]-1))
comments <- trim(str_sub(comments, idx[1], -1))
idx <- str_locate(comments, "\r")
datetime <- c(datetime, str_sub(comments, 1, idx[1]-1))
}
total_review <- data.frame(score=score, review=review, writer=writer, datetime=datetime)
dfs <- rbind.data.frame(dfs, total_review)
}
write.csv(dfs, "SpiderMan_review.csv" , row.names = FALSE)
windowsFonts()
windowsFonts(malgun = "맑은 고딕")
theme_update(text = element_text(family = "malgun"))
library(lawstat)
library(ggthemes)
library(KoNLP)
library(extrafont)
library(ggplot2)
library(tidyverse)
library(nycflights13)
library(dplyr)
library(lubridate)
library(plotly)
windowsFonts()
windowsFonts(malgun = "맑은 고딕")
theme_update(text = element_text(family = "malgun"))
knitr::opts_chunk$set(echo = TRUE)
library(lawstat)
library(ggthemes)
library(KoNLP)
library(extrafont)
library(ggplot2)
library(dplyr)
library(plotly)
windowsFonts(malgun = "맑은 고딕")
theme_update(text = element_text(family = "malgun"))
data<-read.csv('SpiderMan_review.csv')
data2<-data%>%
select(datetime, score) %>%
mutate(date = substr(data$datetime,6, 10)) %>%
mutate(time = substr(data$datetime,12, 13))
data3<-data2 %>%
group_by(date) %>%
summarise(average=mean(score))
date_review<-ggplot(data3, aes(x=date, y=average, fill=average)) +
labs(x='날짜', y='평균 평점') +
geom_bar(width=0.5, stat='identity') +
geom_hline(yintercept=seq(0,8,2.5), lty='dotted', size=0.1)+
ggtitle('스파이더맨 날짜별 평균 평점') +
theme(plot.title = element_text(face = "bold", hjust = 0.5,
size = 15, color = "red3"))
ggplotly(date_review)
hour_review<-data2[,-1] %>%
group_by(time) %>%
summarise(avr=round(mean(score),1)) %>%
arrange(time) %>%
ggplot(aes(x=time, y=avr, group=1))+
labs(x='시간대', y='평균 평점') +
geom_line(arrow=arrow(), size=2, colour='orange') +
geom_point(size=3, shape=19, colour="darkred")+
geom_hline(yintercept=seq(6,8,1), lty='dotted', size=0.1)+
ggtitle('스파이더맨 시간대별 평균 평점') +
theme(plot.title = element_text(face = "bold", hjust = 0.5,
size = 15, color = "red3"))
ggplotly(hour_review)
#평점별로 얼마나 긴 평가를 남기는지 살펴보기 위해, 평점별 영화평 글자수의 box-plot을 그려보았습니다.
num_cha<-as.character(data$review)
scorenchar<-data %>%
select(score) %>%
mutate(nchar=nchar(num_cha))
ggplot(scorenchar, aes(factor(score), nchar))+
geom_boxplot()
# 높은 평점라고 더 긴 평을 남기는건 아니고, 낮은 평점이라고 짧은 평을 남기는건 아닌거 같습니다.
# 오히려 10점은 영화평이 매우 짧았고, 낮은 점수를 준사람이 영화에 대해 할말이 많았던 것 같습니다.
# 아마도 만족한 소비자는 굳이 영화에 대해 이리저리 설명할 필요성을 못 느끼는것 같다. 반면, 불만족하거나
# 뭔가 아쉬웠던 사람은 이래저래 영화에 대해 할말이 많았던 것으로 보입니다.
#가설검정
#H0: 평점이 높으면 글자수도 많다. vs H1: 그렇지 않다.
qqnorm(scorenchar$score)
qqnorm(scorenchar$nchar)
#둘다 정규성을 띄지않는다.
levene.test(scorenchar$score, scorenchar$nchar)
#등분산도 나타내지 않는다.
#만약 두집단 모두 정규성을 나타내고 등분산을 따른다고 가정하면
wow <- lm(score~nchar, data=scorenchar)
anova(wow)
#p-value 가 매우 작습니다. 영가설을 기각합니다.
cov(scorenchar$score, scorenchar$nchar)#공분산
cor(scorenchar$score, scorenchar$nchar)#상관계수 -0.139
par(mfrow=c(1, 1), mar=c(5, 4, 1, 1))
plot(nchar~score, pch=16, data=scorenchar, xlab="평점", ylab="글자수")
abline(lm(nchar~score, data=scorenchar), col="red", lwd=2)
#두 변수는 연관이 없어 보입니다.
install.packages(c("ggthemes", "lawstat", "plotly", "wordcloud2"))
install.packages(c("ggthemes", "lawstat", "nycflights13", "plotly", "tidyverse"))
#일자별/시간대별 평점 분석을 할 것
library(lawstat)
library(ggthemes)
library(KoNLP)
library(extrafont)
library(ggplot2)
library(tidyverse)
library(nycflights13)
library(dplyr)
library(lubridate)
library(plotly)
windowsFonts()
windowsFonts(malgun = "맑은 고딕")
theme_update(text = element_text(family = "malgun"))
setwd('D:/Workspace/R-Project/SpiderMan')
data<-read.csv('SpiderMan_review.csv')
plot(nchar~score, pch=16, data=scorenchar, xlab="평점", ylab="글자수")
abline(lm(nchar~score, data=scorenchar), col="red", lwd=2)
local({
# The directory where Pandoc will be extracted. Feel free
# to adjust this path as appropriate.
dir <- "~/rstudio-pandoc"
# The version of Pandoc to be installed.
version <- "2.7.1"
# Create and move to the requested directory.
dir.create(dir, showWarnings = FALSE, recursive = TRUE)
owd <- setwd(dir)
on.exit(setwd(owd), add = TRUE)
# Construct path to pandoc.
root <- "https://s3.amazonaws.com/rstudio-buildtools"
suffix <- sprintf("pandoc-%s-windows-x86_64.zip", version)
url <- file.path(root, "pandoc-rstudio", version, suffix)
# Download and extract pandoc.
file <- basename(url)
utils::download.file(url, destfile = file)
utils::unzip(file)
unlink(file)
# Write .Renviron to update the version of Pandoc used.
entry <- paste("RSTUDIO_PANDOC", shQuote(path.expand(dir)), sep = " = ")
contents <- if (file.exists("~/.Renviron")) readLines("~/.Renviron")
filtered <- grep("^RSTUDIO_PANDOC", contents, value = TRUE, invert = TRUE)
amended <- union(filtered, entry)
writeLines(amended, "~/.Renviron")
# Report change to the user.
writeLines("Updated .Renviron:\n")
writeLines(amended)
writeLines("\nPlease restart RStudio for these changes to take effect.")
})
